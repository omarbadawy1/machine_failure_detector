# -*- coding: utf-8 -*-
"""Machine_failure_detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14z-A9vpnXlvjqTU4lIrwD08EY0TNmCcs
"""

pip install skl2onnx

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType

MF=pd.read_csv('/content/machine_failure_dataset.csv')
MF.info()

MF.head()

categories=["Temperature",	"Vibration",	"Power_Usage",	"Humidity",	"Machine_Type"	]
X=MF[categories]
y = MF["Failure_Risk"]

from sklearn.preprocessing import LabelEncoder

# Encode Machine_Type
le = LabelEncoder()
X["Machine_Type"] = le.fit_transform(X["Machine_Type"])

X_train ,X_test,y_train,y_test=train_test_split(X,y,test_size=0.7,random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#decisiontreemodel
from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)

#LogisticRegressionmodel
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(max_iter=1000)
lr.fit(X_train_scaled, y_train)

#KNNmodel
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_scaled, y_train)

from sklearn.metrics import accuracy_score

models = {
    "Decision Tree": dt,
    "Logistic Regression": lr,
    "KNN": knn
}

for name, model in models.items():
    if name == "Decision Tree":
        preds = model.predict(X_test)
    else:
        preds = model.predict(X_test_scaled)
    print(f"{name} Accuracy: {accuracy_score(y_test, preds):.2f}")

from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType
initial_type = [('float_input', FloatTensorType([None, X.shape[1]]))]

# Decision Tree onnx
dt_onnx = convert_sklearn(dt, initial_types=initial_type)
with open("decision_tree.onnx", "wb") as f:
    f.write(dt_onnx.SerializeToString())

# Logistic Regression onnx
lr_onnx = convert_sklearn(lr, initial_types=initial_type)
with open("logistic_regression.onnx", "wb") as f:
    f.write(lr_onnx.SerializeToString())

# KNN onnx
knn_onnx = convert_sklearn(knn, initial_types=initial_type)
with open("knn.onnx", "wb") as f:
    f.write(knn_onnx.SerializeToString())

print("ONNX models saved successfully!")